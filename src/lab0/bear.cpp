#include "wolf.hpp"
#include "bear.hpp"
#include "robber.hpp"

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –º–µ–¥–≤–µ–¥—è
Bear::Bear(int x, int y) : NPC(BearType, x, y) {}

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –º–µ–¥–≤–µ–¥—è
Bear::Bear(std::istream &is) : NPC(BearType, is) {}

// –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–≤–µ–¥–µ
void Bear::print()
{
    std::cout << *this;
}

// –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–≤–µ–¥–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
void Bear::print(std::ostream &outfs) {
    outfs << *this;
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º–∏
bool Bear::accept(std::shared_ptr<NPC> visitor) {
    return visitor->fight(std::shared_ptr<Bear>(this,[](Bear*){}));
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ–¥–≤–µ–¥–µ –≤ –ø–æ—Ç–æ–∫
void Bear::save(std::ostream &os) 
{
    os << BearType << std::endl;
    NPC::save(os);
}

// –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º –º–µ–¥–≤–µ–¥–µ–º
bool Bear::fight(std::shared_ptr<Bear> other) 
{
    fight_notify(other, false);
    return false;
}

// –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏—è —Å –≥—Ä–∞–±–∏—Ç–µ–ª–µ–º
bool Bear::fight(std::shared_ptr<Robber> other) 
{
    fight_notify(other, false);
    return false;
}

// –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏—è —Å –≤–æ–ª–∫–æ–º
bool Bear::fight(std::shared_ptr<Wolf> other) 
{
    fight_notify(other, true);
    return true;
}

// –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤—ã–≤–æ–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–≤–µ–¥–µ
std::ostream &operator<<(std::ostream &os, Bear &bear)
{
    os << "Bear üêª: " << *static_cast<NPC *>(&bear) << std::endl;
    return os;
}
